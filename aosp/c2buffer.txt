[frameworks/av/media/codec2/core/include/C2Buffer.h]
// Basic segment math support.
struct C2Segment {
 uint32_t offset;
 uint32_t size;
 + inline constexpr C2Segment(uint32_t offset_, uint32_t size_) : offset(offset_), size(size_)
 + inline constexpr bool isEmpty() const { return size == 0; }
 + inline constexpr bool isValid() const { return offset <= ~size; }
 // 一堆操作符重载
 + inline constexpr operator bool() const
 + inline constexpr bool operator!() const
 + inline constexpr bool contains(const C2Segment &other) const
 + inline constexpr bool operator==(const C2Segment &other) const
 + inline constexpr bool operator!=(const C2Segment &other) const
 + inline constexpr bool operator>=(const C2Segment &other) const
 + inline constexpr bool operator>(const C2Segment &other) const
 + inline constexpr bool operator<=(const C2Segment &other) const
 + inline constexpr bool operator<(const C2Segment &other) const
}


// Common aspect for all objects that have a linear capacity.
class _C2LinearCapacityAspect {
 uint32_t mCapacity;
 + inline constexpr operator C2Segment() const 
 + inline explicit constexpr _C2LinearCapacityAspect(uint32_t capacity) : mCapacity(capacity)
 + inline explicit constexpr _C2LinearCapacityAspect(const _C2LinearCapacityAspect *parent)
   : mCapacity(parent == nullptr ? 0 : parent->capacity())
}


// Aspect for objects that have a linear range inside a linear capacity. This class is copiable.
class _C2LinearRangeAspect : public _C2LinearCapacityAspect {
 uint32_t mOffset;
 uint32_t mSize;
 + inline constexpr uint32_t offset() const { return mOffset; }
 + inline constexpr uint32_t endOffset() const { return mOffset + mSize; }
 + inline constexpr uint32_t size() const { return mSize; }
 + inline constexpr operator C2Segment() const
 // 提供给子类的构造方法们
 + inline constexpr _C2LinearRangeAspect(const _C2LinearRangeAspect &other)
 // capacity 和 parent 保持一致
 + inline constexpr explicit _C2LinearRangeAspect(const _C2LinearCapacityAspect *parent)
 // capacity 和 parent 保持一致，offset和size约束在[0, capacity]之间
 + inline constexpr _C2LinearRangeAspect(const _C2LinearCapacityAspect *parent, size_t offset, size_t size)
  | mOffset = min(offset, capacity)
  | mSize = min(size, capacity-mOffset)
 // capacity 和 parent 保持一致，offset和size约束在parent的[offset, size]之间
 + inline constexpr _C2LinearRangeAspect(const _C2LinearRangeAspect *parent, size_t offset, size_t size)
  | mOffset = min(max(offset, parent.offset), capacity)
  | mSize = min(size, parent.size, capacity-mOffset)
 // capacity=this.mSize, offset和size去掉this的mOffset
 + inline constexpr _C2LinearRangeAspect childRange(size_t offset, size_t size) const 
}


class C2LinearRange : public _C2LinearRangeAspect {
}


class C2LinearCapacity : public _C2LinearCapacityAspect {
 + inline constexpr C2LinearRange range(size_t offset, size_t size) const
}


class _C2EditableLinearRangeAspect : public _C2LinearRangeAspect {
 // 约束在[0, capacity], 不在返回false
 + inline bool setOffset(uint32_t offset)
 + inline bool setSize(uint32_t size)
 // 不返回，直接约束在[0, capacity]
 + inline void setOffset_be(uint32_t offset)
 + inline void setSize_be(uint32_t size)
}


// 具有宽高的object
class _C2PlanarCapacityAspect {
 uint32_t _mWidth;
 uint32_t _mHeight;
 + inline constexpr uint32_t width() const { return _mWidth; }
 + inline constexpr uint32_t height() const { return _mHeight; }
 + inline constexpr operator C2Rect() const
 + inline constexpr _C2PlanarCapacityAspect(uint32_t width, uint32_t height)
}


struct C2Rect {
 uint32_t width;
 uint32_t height;
 uint32_t left;
 uint32_t top;
 + constexpr inline C2Rect(): 0,0,0,0
 + constexpr inline C2Rect(uint32_t width_, uint32_t height_): width_,height_,0,0
 + constexpr C2Rect inline at(uint32_t left_, uint32_t top_) const
  | return C2Rect(width, height, left_, top_);
 + inline constexpr bool isEmpty() const
 + inline constexpr bool isValid() const
 + inline constexpr operator bool() const
 + inline constexpr bool operator!() const
 + inline constexpr bool contains(const C2Rect &other) const
 + inline constexpr bool operator==(const C2Rect &other) const
 + inline constexpr bool operator!=(const C2Rect &other) const
 + inline constexpr bool operator>=(const C2Rect &other) const
 + inline constexpr bool operator>(const C2Rect &other) const
 + inline constexpr bool operator<=(const C2Rect &other) const
 + inline constexpr bool operator<(const C2Rect &other) const
 + inline constexpr uint32_t right() const
 + inline constexpr uint32_t bottom() const
 + 
}


// Crop
class _C2PlanarSectionAspect : public _C2PlanarCapacityAspect {
 C2Rect mCrop;
 + inline constexpr C2Rect crop() const { return mCrop; }
 + inline constexpr _C2PlanarSectionAspect childSection(const C2Rect &crop) const
}


class _C2EditablePlanarSectionAspect : public _C2PlanarSectionAspect {
 + inline void setCrop_be(const C2Rect &crop)
 + inline bool setCrop(const C2Rect &crop)
}


class C2PlanarSection : public _C2PlanarSectionAspect {}
class C2PlanarCapacity : public _C2PlanarCapacityAspect {}


// 单个plane信息，例如：YUV420由2个plane，y-plane和uv-plane
struct C2PlaneInfo {
 enum channel_t : uint32_t {
  CHANNEL_Y,  ///< luma
  CHANNEL_R,  ///< red
  CHANNEL_G,  ///< green
  CHANNEL_B,  ///< blue
  CHANNEL_A,  ///< alpha
  CHANNEL_CR, ///< Cr
  CHANNEL_CB, ///< Cb
 } channel;
 int32_t colInc;       ///< column increment in bytes. may be negative
 int32_t rowInc;       ///< row increment in bytes. may be negative
 uint32_t colSampling; ///< subsampling compared to width (must be a power of 2)
 uint32_t rowSampling; ///< subsampling compared to height (must be a power of 2)
 uint32_t allocatedDepth; ///< size of each sample (must be a multiple of 8)
 uint32_t bitDepth;       ///< significant bits per sample
 uint32_t rightShift;
 enum endianness_t : uint32_t {
  NATIVE,
  LITTLE_END,
  BIG_END
 } endianness,
 uint32_t rootIx; ///< index of the root plane
 uint32_t offset; ///< offset of this plane inside of the root plane
}


struct C2PlanarLayout {
 enum type_t : uint32_t {
  TYPE_UNKNOWN = 0,
  TYPE_YUV = 0x100,   ///< YUV image with 3 planes
  TYPE_YUVA,          ///< YUVA image with 4 planes
  TYPE_RGB,           ///< RGB image with 3 planes
  TYPE_RGBA,          ///< RBGA image with 4 planes
 }
 enum plane_index_t : uint32_t {
  PLANE_Y = 0,
  PLANE_U = 1,
  PLANE_V = 2,
  PLANE_R = 0,
  PLANE_G = 1,
  PLANE_B = 2,
  PLANE_A = 3,
  MAX_NUM_PLANES = 4,
 }
 type_t type;                    // image type
 uint32_t numPlanes;             // number of component planes
 uint32_t rootPlanes;            // number of layout planes (root planes)
 C2PlaneInfo planes[MAX_NUM_PLANES];
}

class C2LinearAllocation : public _C2LinearCapacityAspect {
 // 将该buffer map到进程，fence不为空则该过程是异步的，为空是同步的
 + virtual c2_status_t map(size_t offset, size_t size, C2MemoryUsage usage, C2Fence *fence /* nullable */, void **addr /* nonnull */) = 0;
 // unmap由map的addr
 + virtual c2_status_t unmap(void *addr, size_t size, C2Fence *fence /* nullable */) = 0;
 + virtual C2Allocator::id_t getAllocatorId() const = 0;
 + virtual const C2Handle *handle() const = 0;
 + virtual bool equals(const std::shared_ptr<C2LinearAllocation> &other) const = 0;
}


class C2GraphicAllocation : public _C2PlanarCapacityAspect {
 // Output to: layout && addr
 + virtual c2_status_t map(C2Rect rect, C2MemoryUsage usage, C2Fence *fence, C2PlanarLayout *layout /* nonnull */, uint8_t **addr /* nonnull */) = 0;
 + virtual c2_status_t unmap(uint8_t **addr /* nonnull */, C2Rect rect, C2Fence *fence /* nullable */) = 0;
 + virtual C2Allocator::id_t getAllocatorId() const = 0;
 + virtual const C2Handle *handle() const = 0;
 + virtual bool equals(const std::shared_ptr<const C2GraphicAllocation> &other) const = 0;
}


// 由厂商提供，用于分配1D和2D buffer内存
class C2Allocator {
 typedef uint32_t id_t;
 enum : id_t {
  BAD_ID = 0xBADD, // invalid allocator ID
 }
 enum type_t : uint32_t {
  LINEAR  = 1 << 0, //
  GRAPHIC = 1 << 1,
 }
 struct Traits {
  C2String name;
  id_t id;
  type_t supportedTypes;
  C2MemoryUsage minimumUsage;
  C2MemoryUsage maximumUsage;
 }
 + virtual C2String getName() const = 0;
 + virtual id_t getId() const = 0;
 + virtual std::shared_ptr<const Traits> getTraits() const = 0;
 // out to allocation
 + virtual c2_status_t newLinearAllocation(uint32_t capacity, C2MemoryUsage usage, std::shared_ptr<C2LinearAllocation> *allocation /* nonnull */)
 // 从已有的handle创建allocation，并接管handle的所有权
 + virtual c2_status_t priorLinearAllocation(const C2Handle *handle, std::shared_ptr<C2LinearAllocation> *allocation /* nonnull */)
 + virtual c2_status_t newGraphicAllocation(
            uint32_t width, uint32_t height, uint32_t format, C2MemoryUsage usage,
            std::shared_ptr<C2GraphicAllocation> *allocation /* nonnull */)
 + virtual c2_status_t priorGraphicAllocation(const C2Handle *handle, std::shared_ptr<C2GraphicAllocation> *allocation /* nonnull */)
 + virtual bool checkHandle(const C2Handle *const handle) const = 0;
}


typedef void* C2Handle;


// ================================================================================================
//  BLOCKS
// ================================================================================================
// A 1D block.
class C2Block1D : public _C2LinearRangeAspect {
 + const C2Handle *handle() const;
 + C2Allocator::id_t getAllocatorId() const;
 -------------------------------------------------------------
 + C2Block1D(std::shared_ptr<Impl> impl, const _C2LinearRangeAspect &range);
}


// Read only
class C2ReadView : public _C2LinearCapacityAspect {
 + const uint8_t *data() const;
 + C2ReadView subView(size_t offset, size_t size) const;
 // error during the creation/mapping of this view.
 + c2_status_t error() const;
 -------------------------------------------------------------
 + C2ReadView(std::shared_ptr<Impl> impl, uint32_t offset, uint32_t size);
 + explicit C2ReadView(c2_status_t error);
}


class C2WriteView : public _C2EditableLinearRangeAspect {
 + uint8_t *base();
 + uint8_t *data();
 + c2_status_t error() const;
}


// Read only
class C2ConstLinearBlock : public C2Block1D {
 + C2Acquirable<C2ReadView> map() const;
 + C2ConstLinearBlock subBlock(size_t offset, size_t size) const;
 + C2Fence fence() const { return mFence; }
 -------------------------------------------------------------
 + C2ConstLinearBlock(std::shared_ptr<Impl> impl, const _C2LinearRangeAspect &range, C2Fence mFence);
}


// 可写的block，写入完成后可以以只读的方式分享该block或者其一部分
class C2LinearBlock : public C2Block1D {
 + C2Acquirable<C2WriteView> map();
 + C2ConstLinearBlock share(size_t offset, size_t size, C2Fence fence);
 -------------------------------------------------------------
 + C2LinearBlock(std::shared_ptr<Impl> impl, const _C2LinearRangeAspect &range);
}


class C2CircularBlock : public C2Block1D {
 size_t mReserved;   // end of reserved section
 size_t mCommitted;  // end of committed section
 size_t mUsed;       // end of used section
 size_t mFree;       // end of free section
}


class _C2CircularBlockSegment : public _C2LinearCapacityAspect {
 + size_t available() const; // the available size for this segment.
 + c2_status_t reserve(size_t size, C2Fence *fence /* nullable */);
 + c2_status_t abandon(size_t size);
 + c2_status_t share(size_t size, C2Fence fence, std::vector<C2ConstLinearBlock> &blocks);
 + size_t begin();
 + size_t end();
}


class C2CircularWriteView : public _C2LinearCapacityAspect {
 + uint8_t *base();
 + c2_status_t error() const;
}


class C2CircularWriter : public _C2CircularBlockSegment {
 + c2_status_t commit(size_t size, C2Fence fence);
 + C2Acquirable<C2CircularWriteView> map();
}

// ================================================================================================
//  BUFFERS
// ================================================================================================
class C2BufferData {
 enum type_t : uint32_t {
  INVALID,            ///< invalid buffer type. Do not use.
  LINEAR,             ///< the buffer contains a single linear block
  LINEAR_CHUNKS,      ///< the buffer contains one or more linear blocks
  GRAPHIC,            ///< the buffer contains a single graphic block
  GRAPHIC_CHUNKS,     ///< the buffer contains one of more graphic blocks
 }
 + type_t type() const;
 + const std::vector<C2ConstLinearBlock> linearBlocks() const;
 + const std::vector<C2ConstGraphicBlock> graphicBlocks() const;
}


class C2Buffer {
 typedef void (*OnDestroyNotify) (const C2Buffer *buf, void *arg);
 + const C2BufferData data() const;
 + c2_status_t registerOnDestroyNotify(OnDestroyNotify onDestroyNotify, void *arg = nullptr);
 + c2_status_t unregisterOnDestroyNotify(OnDestroyNotify onDestroyNotify, void *arg = nullptr);
 + const std::vector<std::shared_ptr<const C2Info>> info() const;
 + c2_status_t setInfo(const std::shared_ptr<C2Info> &info);
 + bool hasInfo(C2Param::Type index) const;
 + std::shared_ptr<const C2Info> getInfo(C2Param::Type index) const;
 + std::shared_ptr<C2Info> removeInfo(C2Param::Type index);
 + static std::shared_ptr<C2Buffer> CreateLinearBuffer(const C2ConstLinearBlock &block);
 + static std::shared_ptr<C2Buffer> CreateGraphicBuffer(const C2ConstGraphicBlock &block);
}
